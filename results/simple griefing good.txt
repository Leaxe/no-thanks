Final tally:  {'simple_strat': 8798.0, 'griefing': 167.5, 'good_strat': 11034.5}
fixed order:

def test_fixed_order(trials):
    players = [simple_strat, griefing, good_strat]
    player_names = [x.__name__ for x in players]
    tally = {x: 0 for x in player_names}

    for i in range(trials):
        print('Game', i)
        gam = NoThanks(3)
        score = gam.play_game(*players)
        if len(score) == 1:
            winner = players[score[0]].__name__
            tally[winner] += 1
        else:
            winners = [players[x].__name__ for x in score]
            tally = {
                k: v + 1/len(score) if k in winners else v for (k, v) in tally.items()}

    print('Final tally: ', tally)

def simple_strat(game, state):
    if state.moves == []:
        return None
    if state.moves == ['take']:
        return 'take'

    board = state.board

    # sequential card
    if any([abs(hand_card - board.card) == 1 for hand_card in board.hands[state.to_move].cards]):
        return 'take'

    # lots of counters
    if board.counters * 2 > board.card:
        return 'take'

    return 'noty'


def griefing(game, state):
    if state.moves == []:
        return None
    if state.moves == ['take']:
        return 'take'

    board = state.board
    opp_hands = board.hands[(state.to_move + 1) % len(board.hands)].cards

    def sequential(card, hand):
        return any([abs(hand_card - card) == 1 for hand_card in hand])

    # sequential card
    if sequential(board.card, board.hands[state.to_move].cards):
        return 'take'

    # opponent sequential card
    if sequential(board.card, opp_hands):
        return 'take'

    return 'noty'


def good_strat(game, state):
    if state.moves == []:
        return None
    if state.moves == ['take']:
        return 'take'

    def counter_value(card, counters, deck_count, mult=1):
        # true if the value of the counters alone makes it worth taking
        if not counters:
            return False
        # print(card, counters, card/counters, 100/(deck_count + 45))
        return mult * card / counters < 100/(deck_count + 45)+1

    def sequential(card, hand):
        return any([abs(hand_card - card) == 1 for hand_card in hand])

    board = state.board
    deal_card = board.card
    deal_counters = board.counters
    my_hand = board.hands[state.to_move].cards
    my_counters = board.hands[state.to_move].counters
    opp_hands = set().union(*map(lambda x: x.cards, board.hands))
    deck_possibilities = set(range(3, 36)) - opp_hands
    deck_count = board.deck.count()
    ave_card_in_deck = sum(deck_possibilities)/len(deck_possibilities)

    # streak connection
    if any([hand_card - deal_card == 1 and deal_card - 1 in my_hand for hand_card in my_hand]):
        # print('streak: ', my_hand, deal_card)
        return 'take'

    # sequential card
    if sequential(deal_card, my_hand):
        # take it if someone else wants it
        if sequential(deal_card, opp_hands):
            return 'take'
        # take it if its worth a bit
        if counter_value(deal_card, deal_counters, deck_count, 2):
            return 'take'

    if counter_value(deal_card, deal_counters, deck_count):
        # print('lotta counters')
        return 'take'

    return 'noty'